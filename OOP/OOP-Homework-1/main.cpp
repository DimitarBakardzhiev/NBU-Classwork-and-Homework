#include <cstdlib>

using namespace std;

int main() {

    /*
     Задача 1 - Декларацията на всички член-данни и член-функции.
     * 
     Задача 2 - Член-функцията принадлежи на класа и не може да бъде извиквана самостоятелно
     * 
     Задача 3 - Мутаторът служи за промяна на член-данните на класа, а функцията за достъп ги връща
     * 
     Задача 4 - Функцията за достъп ще може да променя член-данните, което не е редно, а
     * мутаторът няма да мине компилация
     * 
     Задача 5 - Имплицитните параметри не се подават на функцията. Те се подразбират.
     * 
     Задача 6 - Член-функция - 1 (this); Не-член-функция - 0
     * 
     Задача 7 - безброй много
     * 
     Задача 8 - За създаване на инстанции на класа
     * 
     Задача 9 - Конструктор без параметри. Ако няма такъв, компилаторът създава такъв,
     * ако няма други конструктори. В противен случай няма да може да се създават масиви от
     * инстанциите на класа
     * 
     Задача 10 - Неограничен брой. Може и да няма.
     * 
     Задача 11 - Зависи от броя и типа на параметрите
     * 
     Задача 13 - Деклариране - <тип на връщане><име>(<тип на параметър 1><име на параметър 1>, ...)
     * Дефиниране - <тип><име на класа>::<име>(<тип на параметър 1><име на параметър 1>, ...) {
     *      <тяло>
     * }
     * 
     Задача 14 - Валидации на член-данните. Гарантира ни валидност на данните в класа.
     * 
     Задача 15 - Скриват се от други обекти, които не би трябвало да работят с тях или
     * дори биха навредили, ако ги извикат.
     * 
     Задача 16 - Декларират се в public секцията, защото е логично инстанции да се
     * създават извън класа. Могат да са и в другите секции. Ако конструкторът по 
     * подразбиране е в private секцията, класа няма да може да се наследява.
     * 
     Задача 17 - Да, може. Така се предотвратява разрушаването на обектите.
     * 
     Задача 19 - Имплицитният параметър се подава винаги по референция. Експлицитните се
     * познават по типа: <клас>*, <клас>& - референтни, <клас> - по стойност
     * 
     Задача 20 - Да - <клас>* <име> = new <клас>()
     * 
     Задача 21 - Да.
     */
    return 0;
}